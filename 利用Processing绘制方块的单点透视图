final int Len=1080,
  mid=Len/2,
  sd=int(mid*2);

final int num=10,
  Cube_len=int(Len/num),
  Z=int(Cube_len*5);

final int max_move_z=int (Cube_len*1.125),//Cube_len*1
  max_cube_len=int(Cube_len*1.5),
  min_cube_len=int(Cube_len*0.5);

final class Pos2{
  public int x=0,z=0;
  public Pos2(int x0, int z0) {
    x=x0;
    z=z0;
  }
  public Pos2(float x0, float z0) {
    x=int(x0);
    z=int(z0);
  }
}
class Pos3{
  public int x=0,y=0,z=0;
  public Pos2 perspective(){
    float x1=x*sd/(sd+y),z1=-z*sd/(sd+y);
    Pos2 p1=new Pos2(x1,z1);
    return p1;
  } 
  public Pos3(int x0,int y0, int z0) {
    x=x0;
    y=y0;
    z=z0;
  }
  public Pos3(float x0,float y0,float z0) {
    x=int(x0);
    y=int(y0);
    z=int(z0);
  }
  
}

void quad(Pos2 p1, Pos2 p2, Pos2 p3, Pos2 p4) {
  quad(p1.x, p1.z, p2.x, p2.z, p3.x, p3.z, p4.x, p4.z);
}

void fill_top() {

  int r=int(random(1, 3));
  if (r==1) {
    fill(#F0EA6E);
  } else {
    fill(#FFFFFF);
  }
}  

void fill_front() {

  int r=int(random(1, 3));
  if (r==1) {
    fill(#851800);
  } else {
    fill(#162F69);
  }
}  

void fill_bottom() {
  int r=int(random(1, 3));
  if (r==1) {
    fill(#F0EA6E);
  } else {
    fill(#FFFFFF);
  }
}  

void fill_right() {
  int r=int(random(1, 3));
  if (r==1) {
    fill(#FF8E2E);
  } else {
    fill(#678DDB);
  }
} 

void fill_left() {
  int r=int(random(1, 3));
  if (r==1) {
    fill(#FF8E2E);
  } else {
    fill(#678DDB);
  }
} 

void drawcube(Pos3 P1,int cube_len){
  int X1=P1.x,Y1=P1.y,Z1=P1.z;
  
  Pos3 
    P2=new Pos3(X1+cube_len,Y1,Z1),
    P3=new Pos3(X1,Y1,Z1-cube_len),
    P4=new Pos3(X1+cube_len,Y1,Z1-cube_len),
    P11=new Pos3(X1,Y1+cube_len,Z1),
    P22=new Pos3(X1+cube_len,Y1+cube_len,Z1),
    P33=new Pos3(X1,Y1+cube_len,Z1-cube_len),
    P44=new Pos3(X1+cube_len,Y1+cube_len,Z1-cube_len),
    
    P0=new Pos3(X1+cube_len/2,Y1,Z1+cube_len/2);
  
  Pos2 
    p1=P1.perspective(),
    p2=P2.perspective(),
    p3=P3.perspective(),
    p4=P4.perspective(),
    p11=P11.perspective(),
    p22=P22.perspective(),
    p33=P33.perspective(),
    p44=P44.perspective(),
  
    p0=P0.perspective();
  
  fill_front();
  quad(p1,p2,p4,p3);

  if (p0.x<0 && p0.z<0 ) {
    fill_right();
    quad(p2, p22, p44, p4);
    fill_bottom();
    quad(p3, p4, p44, p33);
  } else if (p0.z<0) {
    fill_left();
    quad(p11, p1, p3, p33);
    fill_bottom();
    quad(p3, p4, p44, p33);
  } else if (p0.x<0) {
    fill_top();
    quad(p11, p22, p2, p1);
    fill_right();
    quad(p2, p22, p44, p4);
  } else {
    fill_top();
    quad(p11, p22, p2, p1);
    fill_left();
    quad(p11, p1, p3, p33);
  }
  
}

void drawrandomcube(Pos3 P1){
  float n=random(0.5,1.25),move_z=n*n*max_move_z;
  if(random(-1,1)>0){
    move_z=-move_z;
  }
  
  Pos3 P1_=new Pos3(P1.x,P1.y,P1.z+move_z);
  drawcube(P1_, int(random(min_cube_len,max_cube_len)));
  
}

void drawcubearray(){
  int farth=20*Len;
  for (int y=farth;y>=0;y-=Cube_len){
    for (int x=farth+mid;x>=0;x-=Cube_len){
      Pos3 P1=new Pos3(x,y,-Z);
      drawrandomcube(P1);
   
    }
    
    for (int x=-(farth+mid);x<0;x+=Cube_len){
      Pos3 P1=new Pos3(x,y,-Z);
      drawrandomcube(P1);
   
    }   
    
  }
  
  for (int y=farth;y>=0;y-=Cube_len){
    for (int x=farth+mid;x>=0;x-=Cube_len){
      Pos3 P1=new Pos3(x,y,Z);
      drawrandomcube(P1);
   
    }
    
    for (int x=-(farth+mid);x<0;x+=Cube_len){
      Pos3 P1=new Pos3(x,y,Z);
      drawrandomcube(P1);
   
    }   
    
  }

}

void setup() {
  background(255, 255, 255);
  noStroke();
  
  size(1080, 1080);
  translate(mid,mid);
  
  drawcubearray();
  
  
}
